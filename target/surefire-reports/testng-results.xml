<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="7" passed="6" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2019-03-12T10:47:46Z" name="RestAssureTest" finished-at="2019-03-12T10:47:52Z" duration-ms="6384">
    <groups>
    </groups>
    <test started-at="2019-03-12T10:47:46Z" name="REST_Assure_Get_Call" finished-at="2019-03-12T10:47:52Z" duration-ms="6384">
      <class name="com.qa.test.REST_Assure_Get_Call">
        <test-method is-config="true" signature="setup()[pri:0, instance:com.qa.test.REST_Assure_Get_Call@65d09a04]" started-at="2019-03-12T10:47:46Z" name="setup" finished-at="2019-03-12T10:47:46Z" duration-ms="16" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="getResponseBody()[pri:0, instance:com.qa.test.REST_Assure_Get_Call@65d09a04]" started-at="2019-03-12T10:47:46Z" name="getResponseBody" finished-at="2019-03-12T10:47:48Z" duration-ms="2179" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResponseBody -->
        <test-method is-config="true" signature="setup()[pri:0, instance:com.qa.test.REST_Assure_Get_Call@65d09a04]" started-at="2019-03-12T10:47:48Z" name="setup" finished-at="2019-03-12T10:47:48Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="validate_get_all_headers()[pri:0, instance:com.qa.test.REST_Assure_Get_Call@65d09a04]" started-at="2019-03-12T10:47:48Z" name="validate_get_all_headers" finished-at="2019-03-12T10:47:49Z" duration-ms="609" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validate_get_all_headers -->
        <test-method is-config="true" signature="setup()[pri:0, instance:com.qa.test.REST_Assure_Get_Call@65d09a04]" started-at="2019-03-12T10:47:49Z" name="setup" finished-at="2019-03-12T10:47:49Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="validate_get_incorrect_response_status_code()[pri:0, instance:com.qa.test.REST_Assure_Get_Call@65d09a04]" started-at="2019-03-12T10:47:49Z" name="validate_get_incorrect_response_status_code" finished-at="2019-03-12T10:47:50Z" duration-ms="1193" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validate_get_incorrect_response_status_code -->
        <test-method is-config="true" signature="setup()[pri:0, instance:com.qa.test.REST_Assure_Get_Call@65d09a04]" started-at="2019-03-12T10:47:50Z" name="setup" finished-at="2019-03-12T10:47:50Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="validate_get_incorrect_response_status_line()[pri:0, instance:com.qa.test.REST_Assure_Get_Call@65d09a04]" started-at="2019-03-12T10:47:50Z" name="validate_get_incorrect_response_status_line" finished-at="2019-03-12T10:47:51Z" duration-ms="574" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validate_get_incorrect_response_status_line -->
        <test-method is-config="true" signature="setup()[pri:0, instance:com.qa.test.REST_Assure_Get_Call@65d09a04]" started-at="2019-03-12T10:47:51Z" name="setup" finished-at="2019-03-12T10:47:51Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="validate_get_response_status_code()[pri:0, instance:com.qa.test.REST_Assure_Get_Call@65d09a04]" started-at="2019-03-12T10:47:51Z" name="validate_get_response_status_code" finished-at="2019-03-12T10:47:51Z" duration-ms="577" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validate_get_response_status_code -->
        <test-method signature="validate_get_response_status_line()[pri:0, instance:com.qa.test.REST_Assure_Get_Call@65d09a04]" started-at="2019-03-12T10:47:51Z" name="validate_get_response_status_line" finished-at="2019-03-12T10:47:52Z" duration-ms="582" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validate_get_response_status_line -->
        <test-method is-config="true" signature="setup()[pri:0, instance:com.qa.test.REST_Assure_Get_Call@65d09a04]" started-at="2019-03-12T10:47:51Z" name="setup" finished-at="2019-03-12T10:47:51Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="validate_response_headers_using_lamda_expression()[pri:0, instance:com.qa.test.REST_Assure_Get_Call@65d09a04]" started-at="2019-03-12T10:47:52Z" name="validate_response_headers_using_lamda_expression" finished-at="2019-03-12T10:47:52Z" duration-ms="575" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Header doesn't exists expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Header doesn't exists expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:96)
at org.testng.Assert.failNotEquals(Assert.java:776)
at org.testng.Assert.assertTrue(Assert.java:44)
at com.qa.test.REST_Assure_Get_Call.lambda$validate_response_headers_using_lamda_expression$1(REST_Assure_Get_Call.java:73)
at java.base/java.lang.Iterable.forEach(Iterable.java:75)
at com.qa.test.REST_Assure_Get_Call.validate_response_headers_using_lamda_expression(REST_Assure_Get_Call.java:71)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- validate_response_headers_using_lamda_expression -->
        <test-method is-config="true" signature="setup()[pri:0, instance:com.qa.test.REST_Assure_Get_Call@65d09a04]" started-at="2019-03-12T10:47:52Z" name="setup" finished-at="2019-03-12T10:47:52Z" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
      </class> <!-- com.qa.test.REST_Assure_Get_Call -->
    </test> <!-- REST_Assure_Get_Call -->
  </suite> <!-- RestAssureTest -->
</testng-results>
